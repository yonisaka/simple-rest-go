// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"
)

// Ensure, that ArticleUsecaseMock does implement ArticleUsecase.
// If this is not the case, regenerate this file with moq.
var _ ArticleUsecase = &ArticleUsecaseMock{}

// ArticleUsecaseMock is a mock implementation of ArticleUsecase.
//
// 	func TestSomethingThatUsesArticleUsecase(t *testing.T) {
//
// 		// make and configure a mocked ArticleUsecase
// 		mockedArticleUsecase := &ArticleUsecaseMock{
// 			DeleteFunc: func(ctx context.Context, id int64) error {
// 				panic("mock out the Delete method")
// 			},
// 			FetchFunc: func(ctx context.Context, pagination Pagination) ([]Article, error) {
// 				panic("mock out the Fetch method")
// 			},
// 			GetByIDFunc: func(ctx context.Context, id int64) (Article, error) {
// 				panic("mock out the GetByID method")
// 			},
// 			StoreFunc: func(contextMoqParam context.Context, article *Article) error {
// 				panic("mock out the Store method")
// 			},
// 			UpdateFunc: func(ctx context.Context, ar *Article) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedArticleUsecase in code that requires ArticleUsecase
// 		// and then make assertions.
//
// 	}
type ArticleUsecaseMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, id int64) error

	// FetchFunc mocks the Fetch method.
	FetchFunc func(ctx context.Context, pagination Pagination) ([]Article, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id int64) (Article, error)

	// StoreFunc mocks the Store method.
	StoreFunc func(contextMoqParam context.Context, article *Article) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, ar *Article) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Pagination is the pagination argument value.
			Pagination Pagination
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Store holds details about calls to the Store method.
		Store []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Article is the article argument value.
			Article *Article
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ar is the ar argument value.
			Ar *Article
		}
	}
	lockDelete  sync.RWMutex
	lockFetch   sync.RWMutex
	lockGetByID sync.RWMutex
	lockStore   sync.RWMutex
	lockUpdate  sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *ArticleUsecaseMock) Delete(ctx context.Context, id int64) error {
	if mock.DeleteFunc == nil {
		panic("ArticleUsecaseMock.DeleteFunc: method is nil but ArticleUsecase.Delete was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedArticleUsecase.DeleteCalls())
func (mock *ArticleUsecaseMock) DeleteCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Fetch calls FetchFunc.
func (mock *ArticleUsecaseMock) Fetch(ctx context.Context, pagination Pagination) ([]Article, error) {
	if mock.FetchFunc == nil {
		panic("ArticleUsecaseMock.FetchFunc: method is nil but ArticleUsecase.Fetch was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Pagination Pagination
	}{
		Ctx:        ctx,
		Pagination: pagination,
	}
	mock.lockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	mock.lockFetch.Unlock()
	return mock.FetchFunc(ctx, pagination)
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//     len(mockedArticleUsecase.FetchCalls())
func (mock *ArticleUsecaseMock) FetchCalls() []struct {
	Ctx        context.Context
	Pagination Pagination
} {
	var calls []struct {
		Ctx        context.Context
		Pagination Pagination
	}
	mock.lockFetch.RLock()
	calls = mock.calls.Fetch
	mock.lockFetch.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *ArticleUsecaseMock) GetByID(ctx context.Context, id int64) (Article, error) {
	if mock.GetByIDFunc == nil {
		panic("ArticleUsecaseMock.GetByIDFunc: method is nil but ArticleUsecase.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedArticleUsecase.GetByIDCalls())
func (mock *ArticleUsecaseMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// Store calls StoreFunc.
func (mock *ArticleUsecaseMock) Store(contextMoqParam context.Context, article *Article) error {
	if mock.StoreFunc == nil {
		panic("ArticleUsecaseMock.StoreFunc: method is nil but ArticleUsecase.Store was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Article         *Article
	}{
		ContextMoqParam: contextMoqParam,
		Article:         article,
	}
	mock.lockStore.Lock()
	mock.calls.Store = append(mock.calls.Store, callInfo)
	mock.lockStore.Unlock()
	return mock.StoreFunc(contextMoqParam, article)
}

// StoreCalls gets all the calls that were made to Store.
// Check the length with:
//     len(mockedArticleUsecase.StoreCalls())
func (mock *ArticleUsecaseMock) StoreCalls() []struct {
	ContextMoqParam context.Context
	Article         *Article
} {
	var calls []struct {
		ContextMoqParam context.Context
		Article         *Article
	}
	mock.lockStore.RLock()
	calls = mock.calls.Store
	mock.lockStore.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ArticleUsecaseMock) Update(ctx context.Context, ar *Article) error {
	if mock.UpdateFunc == nil {
		panic("ArticleUsecaseMock.UpdateFunc: method is nil but ArticleUsecase.Update was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ar  *Article
	}{
		Ctx: ctx,
		Ar:  ar,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(ctx, ar)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedArticleUsecase.UpdateCalls())
func (mock *ArticleUsecaseMock) UpdateCalls() []struct {
	Ctx context.Context
	Ar  *Article
} {
	var calls []struct {
		Ctx context.Context
		Ar  *Article
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
